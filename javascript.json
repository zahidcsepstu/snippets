{
    "function": {
        "prefix": "snpt-fif",
        "body": "${6:// Purpose...}\nfunction ${1:funName}(${2:param}) {\n    ${0:if (${2:param}}) {\n    $4\n    $5}}\n}",
        "description": "function"
    },
    "Get Data By a Path": {
        "prefix": "snpt-getDataByPath",
        "body": "function getDataByPath(callBack, params) {\n  if (msbUtilService.checkUndefined(callBack, params)) {\n    msbCommonApiService.getItems(\"${1:serviceKey}\", null, function (data) {\n        (data)? callBack(data) : callBack(null);\n    }, null, false, null, \"taskKey\", ${2:paths.dataPath}, params);\n  }\n}",
        "description": "Get Data By a Path"
    },
    "Save Data By a Path": {
        "prefix": "snpt-saveDataByPath",
        "body": "function saveDataByPath(callBack, params) {\n  if (msbUtilService.checkUndefined(callBack, params)) {\n    var itemId = msbUtilService.searchFromParam(params, \"itemKey\");\n    var newData = msbUtilService.searchFromParam(params, \"dataKey\");\n    msbCommonApiService.saveInnerItem(itemId, newData, \"serviceKey\", \"taskKey\", ${0:paths.dataPath}, params, function (data) {\n        (data)? callBack(data) : callBack(null);\n    }, null, null, isArray, toRemove);\n  }\n}",
        "description": "Save Data By a Path"
    },
    "Key Value Param": {
        "prefix": "snpt-keyVal",
        "body": "${0:{\"key\": \"${1:key}}\", \"value\": ${1:value}}",
        "description": "Key Value Param"
    },
    "Generate Id": {
        "prefix": "snpt-generateId",
        "body": "msbUtilService.generateId()",
        "description": "Generate Id"
    },
    "Date Difference": {
        "prefix": "snpt-dateDifferenceFormated",
        "body": "dateTimeService.dateDifferenceFormated(startDate, endDate, mayNegative)",
        "description": "Date Difference"
    },
    "Working Data Mangr": {
        "prefix": "snpt-workingDataManager",
        "body": "var calls = [\n  {\"serviceName\": \"Service\", \"taskCode\": \"funName\",\"params\": [], \"vmData\": vmData,\"vmDataPath\": \"/vmDataPath\"},\n  {\"serviceName\": \"Service\", \"taskCode\": \"funName\", \"params\": [], \"vmData\": vmData, \"vmDataPath\": \"/vmDataPath\"}\n];\nmsbCommonApiService.workingDataManager(function (data) {\n\n}, calls);",
        "description": "Working Data Mangr"
    },
    "Add Days with a Date": {
        "prefix": "snpt-addDaysWithDate",
        "body": "dateTimeService.formatDateValue(dateTimeService.addDays(date, days));",
        "description": "Add Days with a Date"
    },
    "Sort Dates": {
        "prefix": "snpt-sortDates",
        "body": "dates.sort(dateTimeService.dateSorter);",
        "description": "Sort Dates"
    },
    "Get Index msbUtilService": {
        "prefix": "snpt-getIndex",
        "body": "var index = msbUtilService.getIndex(${1:array}, ${2:property}, ${2:property});",
        "description": "Get Index msbUtilService"
    },
    "Data check,get,update by path/param": {
        "prefix": "snpt-jsonManipulator",
        "body": "var obj = msbUtilService.jsonManipulator(${1:rootObj}, ${2:params}, ${3:path}, ${3:newObj}, ${3:isArray}, ${3:pickPathData}, ${3:container}, ${3:toRemove});",
        "description": "Data check,get,update by path/param"
    },
    "Get data from params": {
        "prefix": "snpt-searchFromParam",
        "body": "var value = msbUtilService.searchFromParam(${1:params}, ${2:\"key\"});",
        "description": "Get data from params"
    },
    "Params to get working data": {
        "prefix": "snpt-callparams",
        "body": "{\"serviceName\": \"${1:serviceName}\", \"taskCode\": \"${1:funName}\", \"params\": [], \"vmData\": vm.data, \"vmDataPath\": \"/\"}",
        "description": "Params to get working data"
    },
    "Get Index By Values msbUtilService": {
        "prefix": "snpt-getIndexByValues",
        "body": "var index = msbUtilService.getIndexByValues(${1:array}, param);",
        "description": "Get Index By Values msbUtilService"
    },
    "Get Items By Prop msbUtilService": {
        "prefix": "snpt-getItemsByProperties",
        "body": "var items = msbUtilService.getItemsByProperties(${1:array}, param);",
        "description": "Get Items By Prop msbUtilService"
    },
    "Get Items msbCommonApiService": {
        "prefix": "snpt-getItems",
        "body": "msbCommonApiService.getItems(\"serviceKey\", searchParams, function (data) {\n    if(data) {\n\n    }\n}, errorCallback, dontPreserveLocally, callBackParams, \"taskKey\", path, paramObj, newObj, deepIDs, retrieveDeep);",
        "description": "Get Items msbCommonApiService"
    },
    "Get Item msbCommonApiService": {
        "prefix": "snpt-getItem",
        "body": "msbCommonApiService.getItem(\"serviceKey\", itemId, itemKey, function (data) {\n    if(data) {\n\n    }\n}, errorCallback, callBackParams, \"taskKey\", path, paramObj, deepIDs);",
        "description": "Get Item msbCommonApiService"
    },
    "Save Item msbCommonApiService": {
        "prefix": "snpt-saveItem",
        "body": "msbCommonApiService.saveItem(item, isNew, \"serviceKey\", function (data) {\n    if (data) {\n\n    }\n}, errorCallback, dontPreserveLocally, callBackParams, \"taskKey\", doNotMerge);",
        "description": "Save Item msbCommonApiService"
    },
    "Save Inner Item msbCommonApiService": {
        "prefix": "snpt-saveInnerItem",
        "body": "msbCommonApiService.saveInnerItem(itemId, newObj, \"serviceKey\", \"taskKey\", path, paramObj, function (data) {\n    if (data) {\n\n    }\n}, errorCallback, callBackParams, isArray, toRemove);",
        "description": "Save Inner Item msbCommonApiService"
    },
    "Interface Mangr msbCommonApiService": {
        "prefix": "snpt-interfaceManager",
        "body": "msbCommonApiService.interfaceManager(function (data) {\n    if (data) {\n\n    }\n}, \"serviceName\", \"taskCode\", param);",
        "description": "Interface Mangr msbCommonApiService"
    },
    "Check Undefined args": {
        "prefix": "snpt-checkUndefined",
        "body": "msbUtilService.checkUndefined(param)",
        "description": "Check Undefined args"
    },
    "commonDialog": {
        "prefix": "snpt-commonDialog",
        "body": "var dialogInfo = {\n        title: \"Sample Spec\",\n        info: { // on-update = \"info.data.onUpdate(item)\"\n            \"html\": '<td-po-sample-spec material=\"info.data.material\"></td-po-sample-spec>',\n            \"data\": {\n                material: vm.selectedMaterial\n            }\n        },\n        widthDef: null,\n        heightDef: null\n};\n\nmsbUtilService.openDirectiveDialog(dialogInfo, function (info) {\n\n});",
        "description": "commonDialog"
    },
    "showToast": {
        "prefix": "snpt-showToast msbUtilService",
        "body": "msbUtilService.showToast(\"${1:Saved}\", \"success-toast\", 3000);",
        "description": "showToast"
    },
    "removeItems": {
        "prefix": "snpt-removeItems - msbUtilService",
        "body": "msbUtilService.removeItems(${1:array}, item.TECHDISER_ID);",
        "description": "removeItems"
    },
    "confirmAndDelete": {
        "prefix": "snpt-confirmAndDelete - msbUtilService",
        "body": "msbUtilService.confirmAndDelete(null, ${1:item}, function (){\n    msbUtilService.removeItems(${1:array}, item.TECHDISER_ID);\n});",
        "description": "confirmAndDelete"
    },
    "commonSelector": {
        "prefix": "snpt-commonSelector - organizationsDataService",
        "body": "var params = {\n  data:  array,\n  checkAttr: 'TECHDISER_ID',\n  showAttrs: [{\"key\": \"title\", \"value\": \"Title\"}],\n  selectionType: 'multiple',\n  selected: [],\n  dialogTitle: 'Select Items',\n  filterParams: []\n}\n\nmsbCommonApiService.interfaceManager(function (data) {\n    if (data) {\n\n    }\n}, \"organizationsDataService\", \"commonSelector\", params);",
        "description": "commonSelector"
    },
    "handleSaveFunction": {
        "prefix": "snpt-saveHanlder",
        "body": "vm.saveHandlerService = saveHandler();\n\nfunction saveHandler() {\n\n  var saveHandlerObj = {\n      save : save\n  };\n\n  function save() {\n  }\n\n  return saveHandlerObj;\n}",
        "description": "handleSaveFunction"
    },
    "idGenerationController": {
        "prefix": "snpt-idGenerationControllerHandler",
        "body": [
            "// all \"menu\" will be replaced by menu name",
            "// \"MenuMgtService\" will be replaced by mgt service name",
            "",
            "vm.templatePath = \"/[TECHDISER_ID=templateRootID]/subMenuContainer/[TECHDISER_ID=templateSubMenuID]/specificAttr\";  // Template Path",
            "vm.menuID = \"menu_1\";",
            "vm.contextId = \"contextId\";",
            "vm.save = save;",
            "",
            "init();",
            "",
            "function init() {",
            "    initiateParamInfo();",
            "    getAllNecessaryData();",
            "}",
            "",
            "function initiateParamInfo() {",
            "",
            "    function initContextInfo() {",
            "        vm.viewParams.push({ \"key\": \"menuID\", \"value\": vm.menuID });",
            "        vm.viewParams.push({ \"key\": \"contextObjectId\", \"value\": vm.contextId });",
            "    }",
            "",
            "    function initTemplatePath() {",
            "",
            "        var menuConfig = MenuMgtService.getMenuConfig();",
            "        var subMenuConfig = MenuMgtService.getSubMenuConfig();",
            "",
            "        vm.viewParams.push({ \"key\": SAVE_POLICY_SPEC.templatePath, \"value\": vm.templatePath });",
            "",
            "        vm.viewParams.push({ \"key\": \"templateRootID\", \"value\": menuConfig.templateRootID });",
            "        vm.viewParams.push({ \"key\": \"templateSubMenuID\", \"value\": getSubMenuConfig.templateSubMenuID });",
            "",
            "    }",
            "",
            "    function initParam() {",
            "        initContextInfo();",
            "        initTemplatePath();",
            "    }",
            "",
            "    initParam();",
            "",
            "}",
            "",
            "function getAllNecessaryData() {",
            "",
            "    function idGenearationHandler() {",
            "",
            "        var menuConfig = MenuMgtService.getMenuConfig();",
            "        var subMenuConfig = MenuMgtService.getSubMenuConfig();",
            "",
            "        var params = angular.copy(vm.viewParams);",
            "",
            "        params = specDefHandlerService.prepareParamInfo(",
            "            menuConfig.serviceName,",
            "            menuConfig.menuJsonTask,",
            "            vm.templatePath,",
            "            menuConfig.pathPrefix + subMenuConfig.specificAttr,",
            "            vm.contextId,",
            "            menuConfig.jsonServiceName,",
            "            params",
            "        );",
            "",
            "        specDefHandlerService.generatePathIDs(function (updatedParams) {",
            "            if (updatedParams) {",
            "                vm.viewParams = updatedParams;",
            "            }",
            "            getAllProcessData();",
            "        }, params);",
            "",
            "    }",
            "",
            "    function getAllProcessData() {",
            "",
            "        var params = angular.copy(vm.viewParams);",
            "",
            "        msbCommonApiService.interfaceManager(function (data) {",
            "            if (data) {",
            "                vm.data = data;",
            "            }",
            "",
            "        }, \"MenuMgtService\", \"getSubMenuSpecificAttrData\", params);",
            "",
            "    }",
            "",
            "    idGenearationHandler();",
            "",
            "}",
            "",
            "function save() {",
            "    if (vm.data) {",
            "",
            "        var params = angular.copy(vm.viewParams);",
            "        params.push({ \"key\": \"data\", \"value\": vm.data });",
            "",
            "",
            "        msbCommonApiService.interfaceManager(function (data) {",
            "            if (data) {",
            "                rootScope.unSaveState = false;",
            "                msbUtilService.showToast(\"Consumption Data Saved\", \"success-toast\", 3000);",
            "            }",
            "        }, \"MenuMgtService\", \"saveSubMenuSpecificAttrData\", params);",
            "",
            "    }",
            "    else {",
            "        msbUtilService.showToast(\"Save Operation Failed\", \"error-toast\", 3000);",
            "    }",
            "}"
        ],
        "description": "idGenerationController"
    },
    "handleMgtService": {
        "prefix": "snpt-mgtServiceHandler",
        "body": [
            "(function () {",
            "",
            "    'use strict';",
            "",
            "    angular.module('app.moduleName')",
            "        .factory('MenuMgtService', MenuMgtService);",
            "",
            "    function MenuMgtService(msbUtilService, msbCommonApiService, specDefHandlerService, SAVE_POLICY_SPEC) {",
            "",
            "        var menuInfoHandler = this;",
            "",
            "        menuInfoHandler.subMenuInfoHandler1 = subMenuInfoHandler1();",
            "        menuInfoHandler.subMenuInfoHandler2 = subMenuInfoHandler2();",
            "",
            "        var menuConfig = {",
            "            serviceName: \"service_name\",",
            "            taskCode: \"task_code\",",
            "            pathPrefix: \"/[TECHDISER_ID=$dataSaveRootPath]\",",
            "            templateRootID: \"rootId\",",
            "            jsonServiceName: \"menuName_json\",",
            "        };",
            "",
            "        var service = {",
            "",
            "            interfaceDef: interfaceDef,",
            "",
            "            getMenuConfig: getMenuConfig,",
            "            getSubMenuConfig: menuInfoHandler.subMenuInfoHandler1.getSubMenuConfig,",
            "            getSubMenuSpecificAttrData: menuInfoHandler.subMenuInfoHandler1.getSubMenuSpecificAttrData,",
            "            saveSubMenuSpecificAttrData: menuInfoHandler.subMenuInfoHandler1.saveGarmentData",
            "        };",
            "",
            "        function getMenuConfig() {",
            "            return menuConfig;",
            "        }",
            "",
            "        function interfaceDef(callBack, taskCode, param) {",
            "            if (taskCode) {",
            "                if (service[taskCode]) {",
            "                    service[taskCode](callBack, param);",
            "                } else {",
            "                    console.log(\"service missing: \" + taskCode);",
            "                }",
            "            }",
            "        }",
            "",
            "        function subMenuInfoHandler1() {",
            "",
            "            var paths = {",
            "                \"specificAttr\": \"/subMenu/[TECHDISER_ID=subMenuId]/specificAttr\",",
            "                \"templateSubMenuID\": \"subMenuId\"",
            "            }",
            "",
            "            var service = {",
            "                getSubMenuConfig: getSubMenuConfig,",
            "                getSubMenuSpecificAttrData: getSubMenuSpecificAttrData,",
            "                saveSubMenuSpecificAttrData: saveSubMenuSpecificAttrData",
            "            }",
            "",
            "            function getSubMenuConfig() {",
            "                return paths;",
            "            }",
            "",
            "            function getSubMenuId(params) {",
            "                return msbUtilService.searchFromParam(params, \"dataSaveRootPath\");",
            "            }",
            "",
            "            function getSubMenuSpecificAttrData(callBack, vmparams) {",
            "",
            "                function fetchExternalServiceData(callBack, params) {",
            "",
            "                    msbCommonApiService.interfaceManager(function (data) {",
            "                        if (data) {",
            "                            params.push({ \"key\": \"preReqData\", \"value\": data });  //push data to params",
            "                        }",
            "                    }, \"serviceName\", \"taskCode\", param);",
            "",
            "                    fetchOwnServiceData(callBack, params);",
            "                }",
            "",
            "                function fetchOwnServiceData(callBack, params) {",
            "",
            "                    msbCommonApiService.getItems(\"serviceKey\", searchParams, function (data) {",
            "                        if (data) {",
            "                            params.push({ \"key\": \"existingData\", \"value\": data });  //push data to params",
            "                        }",
            "                        prepareViewInfo(callBack, params)",
            "                    }, errorCallback, dontPreserveLocally, callBackParams, \"taskKey\", path, paramObj, newObj, deepIDs, retrieveDeep);",
            "",
            "                }",
            "",
            "                function prepareViewInfo(callBack, params) {",
            "",
            "                    function updateViewData(viewData, existingData) {",
            "                        var updateData = [];",
            "",
            "                        // prepare updateData",
            "",
            "                        return updateData;",
            "                    }",
            "",
            "                    function prepareViewData(idPrefix, preReqData) {",
            "                        var viewData = [];",
            "",
            "                        //prepare viewData",
            "",
            "                        return viewData;",
            "                    }",
            "",
            "                    function prepareAllData(subMenuSaveAttrPrefix, preReqData, existingData) {",
            "",
            "                        //prepare viewData",
            "                        var viewData = prepareViewData(subMenuSaveAttrPrefix, preReqData);",
            "",
            "                        var preparedData = updateViewData(viewData, existingData);",
            "",
            "                        return preparedData;",
            "                    }",
            "",
            "                    function getIdPrefix(params, prefix) {",
            "                        return getSubMenuId(params) + prefix;",
            "                    }",
            "",
            "                    function handleOperation(callBack, params, prefix) {",
            "",
            "                        var subMenuSaveAttrPrefix = getIdPrefix(params, prefix);",
            "",
            "                        var preReqData = msbUtilService.searchFromParam(params, \"preReqData\");",
            "",
            "                        var existingData = msbUtilService.searchFromParam(params, \"existingData\");",
            "",
            "                        var preparedData = prepareAllData(subMenuSaveAttrPrefix, preReqData, existingData);",
            "",
            "                        callBack(preparedData);",
            "                    }",
            "",
            "                    function initDataPreparation(callBack, params) {",
            "",
            "                        var templatePath = msbUtilService.searchFromParam(params, SAVE_POLICY_SPEC.templatePath);",
            "",
            "                        if (templatePath) {",
            "                            specDefHandlerService.samplingOpHandler(",
            "                                function (prefix) {",
            "                                    if (prefix) {",
            "                                        handleOperation(callBack, params, prefix);",
            "                                    } else {",
            "                                        callBack(null);",
            "                                    }",
            "                                }, SAVE_POLICY_SPEC.specType[1], templatePath, menuConfig.jsonServiceName",
            "                            );",
            "                        } else {",
            "                            callBack(null);",
            "                        }",
            "                    }",
            "",
            "                    initDataPreparation(callBack, params);",
            "",
            "                }",
            "",
            "                function initInfo(callBack, vmparams) {",
            "",
            "                    var params = angular.copy(vmparams);",
            "",
            "                    fetchExternalServiceData(callBack, params);",
            "",
            "                }",
            "",
            "                initInfo(callBack, vmparams);",
            "",
            "            }",
            "",
            "            function saveSubMenuSpecificAttrData(callBack, params) {",
            "",
            "                if (msbUtilService.checkUndefined(callBack, params)) {",
            "",
            "                    var newData = msbUtilService.searchFromParam(params, \"data\");",
            "                    var itemID = msbUtilService.searchFromParam(params, \"dataSaveRootPath\");",
            "",
            "                    var backeSavePath = msbUtilService.searchFromParam(params, SAVE_POLICY_SPEC.backeSavePath);",
            "                    var backendConatinerObj = msbUtilService.searchFromParam(params, SAVE_POLICY_SPEC.preparedObj);",
            "",
            "                    if (newData && itemID) {",
            "",
            "                        msbCommonApiService.saveInnerItem(itemID, newData, menuConfig.serviceName, menuConfig.taskCode,",
            "                            paths.specificAttr, params, function (data) {",
            "                                (data) ? callBack(data) : callBack(null);",
            "                            }, null, null, true, true, backeSavePath, backendConatinerObj);",
            "",
            "                    } else {",
            "",
            "                        callBack(null);",
            "",
            "                    }",
            "",
            "                }",
            "",
            "            }",
            "",
            "            return service;",
            "        }",
            "",
            "        return service;",
            "",
            "    }",
            "",
            "})();"
        ],
        "description": "handleMgtService"
    },
    "specDefHandler": {
        "prefix": "snpt-handleSpecDef",
        "body": [
            "(function () {",
            "    'use strict';",
            "",
            "    angular",
            "        .module('app.moduleName')",
            "        .factory('menuName_json', menuName_json);",
            "",
            "    /** @ngInject */",
            "    function menuName_json(SAVE_POLICY_SPEC, PARAM_NOTION) {",
            "",
            "        var service = {",
            "            specInterface: specInterface,",
            "            rootDef: rootDef,",
            "            rootSubMenuDef: rootSubMenuDef",
            "        };",
            "",
            "        // this function is changable",
            "        function rootDef(specType, servicePath) {",
            "",
            "            var prefix = \"menuId\";",
            "",
            "            function getIdSpec(servicePath) {",
            "",
            "                var def = {",
            "                    templatePath: \"/\",",
            "                    concateAttributes: [\"prefix\", \"contextObjectId\"],",
            "                    refereceObject: { prefix: prefix }",
            "                };",
            "",
            "                def[SAVE_POLICY_SPEC.pathId] = \"\";",
            "",
            "                return def;",
            "",
            "            }",
            "",
            "            function getPrefix() {",
            "                return prefix;",
            "            }",
            "",
            "            function specInterface(specType, servicePath) {",
            "                if (specType == SAVE_POLICY_SPEC.specType[0]) {",
            "                    return getIdSpec(servicePath);",
            "                } else if (specType == SAVE_POLICY_SPEC.specType[1]) {",
            "                    return getPrefix();",
            "                }",
            "            }",
            "",
            "            return specInterface(specType, servicePath);",
            "        }",
            "",
            "        // this function is changable",
            "        function rootSubMenuDef(specType, servicePath) {",
            "",
            "            var prefix = \"subMenu\";",
            "",
            "            function getIdSpec(servicePath) {",
            "",
            "                var def = {",
            "                    templatePath: \"/subMenu\",",
            "                    concateAttributes: [\"prefix\"],",
            "                    refereceObject: { prefix: prefix }",
            "                };",
            "",
            "                def[SAVE_POLICY_SPEC.pathId] = \"\";",
            "",
            "",
            "                return def;",
            "            }",
            "            function fetchIdPrefix(specType, servicePath, functionNames) {",
            "",
            "                var idPrefix = \"\";",
            "                if (functionNames && functionNames.length > 0) {",
            "                    var executeableFunction = service[functionNames[functionNames.length - 1]];",
            "                    idPrefix = executeableFunction(specType, servicePath);",
            "                }",
            "                return idPrefix;",
            "            }",
            "",
            "            function specInterface(specType, servicePath) {",
            "                if (specType == SAVE_POLICY_SPEC.specType[0]) {",
            "                    return getIdSpec(servicePath);",
            "                }",
            "                else if (specType == SAVE_POLICY_SPEC.specType[1]) {",
            "                    info = fetchIdPrefix(specType, servicePath, functionNames);",
            "                }",
            "            }",
            "",
            "            return specInterface(specType, servicePath);",
            "",
            "        }",
            "",
            "        function specInterface(specType, servicePath, functionNames) {",
            "",
            "            function getIdGenerationSpec(specType, servicePath, functionNames) {",
            "",
            "                var idGenerationPolicies = [];",
            "                if (functionNames) {",
            "                    functionNames.forEach(function (functionName) {",
            "                        if (functionName && service[functionName]) {",
            "                            var executeableFunction = service[functionName];",
            "                            var ideGenPolicy = executeableFunction(specType, servicePath);",
            "                            if (ideGenPolicy) {",
            "                                idGenerationPolicies.push(ideGenPolicy);",
            "                            }",
            "                        }",
            "                    });",
            "                }",
            "                return idGenerationPolicies;",
            "            }",
            "",
            "            function fetchIdPrefix(specType, servicePath, functionNames) {",
            "",
            "                var idPrefix = \"\";",
            "                if (functionNames && functionNames.length > 0) {",
            "                    var executeableFunction = service[functionNames[functionNames.length - 1]];",
            "                    idPrefix = executeableFunction(specType, servicePath);",
            "                }",
            "                return idPrefix;",
            "            }",
            "",
            "            function intOp(specType, servicePath, functionNames) {",
            "",
            "                var info = null;",
            "",
            "                if (specType == SAVE_POLICY_SPEC.specType[0]) {",
            "                    info = getIdGenerationSpec(specType, servicePath, functionNames);",
            "                } else if (specType == SAVE_POLICY_SPEC.specType[1]) {",
            "                    info = fetchIdPrefix(specType, servicePath, functionNames);",
            "                }",
            "",
            "                return info;",
            "",
            "            }",
            "",
            "            return intOp(specType, servicePath, functionNames);",
            "",
            "        }",
            "",
            "        return service;",
            "",
            "    }",
            "})();"
        ],
        "description": "specDefHandler"
    },
    "Init and Save Handler": {
        "prefix": "snpt-initSavePackageCtrl",
        "body": [
            "(function () {",
            "    'use strict';",
            "    angular.module('app.${2:app-name}')",
            "        .controller('${1:initSavePackage}', ${1:initSavePackage});",
            "",
            "    /** @ngInject */",
            "    function ${1:initSavePackage}() {",
            "        debugger",
            "        var TECHDISER_COMPONENT_NAME = \"${1:initSavePackage}\";",
            "        var TECHDISER_SERVICE_INFO = {};",
            "        var vm = this;",
            "",
            "        vm.preAsynchCallHandler = preAsynchCallHandler();",
            "        vm.asynchCallHandler = asynchCallHandler();",
            "        vm.postAsynchCallHandler = postAsynchCallHandler();",
            "        vm.saveHandlerService = saveHandler();",
            "",
            "        init();",
            "",
            "        function init() {",
            "            vm.preAsynchCallHandler.initHandler();",
            "        }",
            "",
            "        function preAsynchCallHandler() {",
            "",
            "            var opPreAsync = {",
            "                initHandler: initHandler,",
            "                doOperation: doOperation,",
            "                doNextOperation: doNextOperation",
            "            }",
            "",
            "            function initHandler() {",
            "                vm.loadViewContent = false;",
            "                doOperation();",
            "            }",
            "",
            "            function doOperation() {",
            "                doNextOperation();",
            "            }",
            "",
            "            function doNextOperation() {",
            "                vm.asynchCallHandler.initHandler();",
            "            }",
            "",
            "            return opPreAsync;",
            "        }",
            "",
            "        function asynchCallHandler() {",
            "",
            "            var opAsync = {",
            "                initHandler: initHandler,",
            "                doOperation: doOperation,",
            "                doNextOperation: doNextOperation",
            "            }",
            "",
            "            function initHandler() {",
            "                doOperation();",
            "            }",
            "",
            "            function doOperation() {",
            "                doNextOperation();",
            "            }",
            "",
            "            function doNextOperation() {",
            "                vm.postAsynchCallHandler.initHandler();",
            "            }",
            "",
            "            return opAsync;",
            "        }",
            "",
            "        function postAsynchCallHandler() {",
            "            var opPostAsync = {",
            "                initHandler: initHandler,",
            "                doOperation: doOperation,",
            "                doNextOperation: doNextOperation",
            "            }",
            "",
            "            function initHandler() {",
            "                doOperation();",
            "            }",
            "",
            "            function doOperation() {",
            "                doNextOperation();",
            "            }",
            "",
            "            function doNextOperation() {",
            "                vm.loadViewContent = true;",
            "            }",
            "",
            "            return opPostAsync;",
            "        }",
            "",
            "",
            "",
            "        function saveHandler() {",
            "",
            "            var saveHandlerObj = {",
            "                save: save",
            "            };",
            "",
            "            function save() {",
            "            }",
            "",
            "            return saveHandlerObj;",
            "        }",
            "    }",
            "})();"
        ],
        "description": "Init and Save Handler"
    },
    "Side Nav Controller": {
        "prefix": "snpt-sideNavCtrl",
        "body": [
            "//add dependency \\$mdSidenav in controller",
            "vm.leftNavPined = true",
            "vm.headerTitle = \"Test Header\"",
            "vm.toggleSidenav = function toggleSidenav(sidenavId) {",
            "",
            "    if (\\$mdSidenav(sidenavId).isLockedOpen()) {",
            "        vm.leftNavPined = false",
            "        \\$mdSidenav(sidenavId).close()",
            "    } else {",
            "        vm.leftNavPined = true",
            "        \\$mdSidenav(sidenavId).toggle()",
            "    }",
            "}",
            "",
            "vm.sideNav = {",
            "    \"subMenuHeader\": \"Side Nav\",",
            "    \"menuList\": [",
            "        {",
            "            \"title\": \"menu1\",",
            "            \"state\": \"state\"",
            "        },",
            "        {",
            "            \"title\": \"menu2\",",
            "            \"child\": [",
            "                {",
            "                    \"title\": \"sub-menu1\",",
            "                    \"child\": [",
            "                        {",
            "                            \"title\": \"child-menu1\",",
            "                            \"state\": \"state\"",
            "                        },",
            "                        {",
            "                            \"title\": \"child-menu2\",",
            "                            \"state\": \"state\"",
            "                        },",
            "                    ]",
            "                },",
            "                {",
            "                    \"title\": \"sub-menu2\",",
            "                    \"state\": \"state\"",
            "                },",
            "            ]",
            "        }",
            "    ]",
            "}"
        ],
        "description": "Side Nav Controller"
    },
    "module": {
        "prefix": "snpt-module",
        "body": [
            "(function () {",
            "    'use strict';",
            "",
            "    angular",
            "        .module('app.${1:app-name}', [])",
            "        .config(config);",
            "",
            "    /** @ngInject */",
            "    function config(\\$stateProvider, msNavigationServiceProvider) {",
            "        \\$stateProvider",
            "            .state('app.${1:app-name}', {",
            "                abstract: true,",
            "                url: '/${1:app-name}'",
            "            })",
            "            .state('app.${1:app-name}.${2:menu}', {",
            "                url: '${2:menu}',",
            "                views: {",
            "                    'content@app': {",
            "                        templateUrl: 'app/main/test.html',",
            "                        controller: 'ctrl as vm'",
            "                    }",
            "                }",
            "            })",
            "",
            "            //uiView",
            "            .state('app.${1:app-name}.${3:menu-with-ui-view}', {",
            "                url: '/${3:menu-with-ui-view}',",
            "                views: {",
            "                    'content@app': {",
            "                        templateUrl: 'app/main/test.html',",
            "                        controller: 'ctrl as vm'",
            "                    }",
            "                }",
            "            })",
            "            .state('app.${1:app-name}.${3:menu-with-ui-view}.${4:menu-with-ui-view-child}', {",
            "                url: '/${4:menu-with-ui-view-child}',",
            "                views: {",
            "                    'uiView': {",
            "                        templateUrl: 'app/main/test.html',",
            "                        controller: 'ctrl as vm'",
            "                    }",
            "                },",
            "                bodyClass: 'printable'",
            "            })",
            "",
            "",
            "        // Navigation",
            "        msNavigationServiceProvider.saveItem('${1:app-name}', {",
            "            title: '${1:app-name}',",
            "            icon: 'icon-desktop-mac',",
            "            weight: -80",
            "        });",
            "        msNavigationServiceProvider.saveItem('${1:app-name}.${2:menu}', {",
            "            title: '${2:menu}',",
            "            state: 'app.${1:app-name}.${2:menu}',",
            "            icon: 'icon-cog-box',",
            "            weight: 1",
            "        });",
            "",
            "        //uiView",
            "        msNavigationServiceProvider.saveItem('${1:app-name}.${3:menu-with-ui-view}', {",
            "            title: '${3:menu-with-ui-view}',",
            "            state: 'app.${1:app-name}.${3:menu-with-ui-view}',",
            "            icon: 'icon-cog-box',",
            "            weight: 2",
            "        });",
            "    }",
            "",
            "})();"
        ],
        "description": "module"
    },
    "Controller": {
        "prefix": "snpt-controller",
        "body": [
            "(function () {",
            "    'use strict';",
            "    angular.module('app.${2:app-name}')",
            "        .controller('${1:controllerName}', ${1:controllerName});",
            "",
            "    /** @ngInject */",
            "    function ${1:controllerName}() {",
            "        debugger",
            "        var TECHDISER_COMPONENT_NAME = \"${1:controllerName}\";",
            "        var TECHDISER_SERVICE_INFO = {};",
            "        var vm = this;",
            "        vm.loadViewContent = true",
            "    }",
            "})();"
        ],
        "description": "Controller"
    },
    "service": {
        "prefix": "snpt-service",
        "body": [
            "(function () {",
            "    'use strict'",
            "    angular",
            "        .module('app.${2:app-name}')",
            "        .factory(\"${1:serviceName}\", ${1:serviceName});",
            "",
            "    function ${1:serviceName}() {",
            "",
            "        var service = {",
            "            interfaceDef: interfaceDef",
            "        };",
            "",
            "        function interfaceDef(callBack, taskCode, param) {",
            "            if (taskCode) {",
            "                if (service[taskCode]) {",
            "                    service[taskCode](callBack, param)",
            "                } else {",
            "                    console.log(\"service missing: \" + taskCode)",
            "                }",
            "            }",
            "        }",
            "",
            "        return service;",
            "    }",
            "",
            "})();"
        ],
        "description": "service"
    },
    "Dialog Controller": {
        "prefix": "snpt-dialogCtrl",
        "body": [
            "(function () {",
            "    angular",
            "        .module('app.${2:app-name}')",
            "        .controller(\"${1:dialogController}\", ${1:dialogController});",
            "",
            "    function ${1:dialogController}(\\$mdDialog) {",
            "        var vm = this;",
            "        vm.discard = function () {",
            "            \\$mdDialog.cancel();",
            "        };",
            "        vm.done = function () {",
            "            \\$mdDialog.hide(\"data\");",
            "        }",
            "    }",
            "})();"
        ],
        "description": "Dialog Controller"
    },
    "Open Dialog": {
        "prefix": "snpt-openDialog",
        "body": [
            "// add dependency \\$mdDialog",
            "vm.openDialog = openDialog;",
            "function openDialog() {",
            "    \\$mdDialog",
            "        .show({",
            "            controller: 'dialogController as vm',",
            "            templateUrl: 'app/main/dialog.html',",
            "            locals: {",
            "                param: \"paramData\"",
            "            }",
            "        })",
            "        .then(function (answer) {",
            "",
            "        });",
            "}"
        ],
        "description": "Open Dialog"
    },
    "For Each": {
        "prefix": "snpt-forEach",
        "body": [
            "if($array && $array.length>0){",
            "    $array.forEach(function(obj){",
            "    })",
            "}"
        ],
        "description": "For Each"
    },
    "Matrix Controller": {
        "prefix": "snpt-matrixCtrl",
        "body": [
            "vm.column = [",
            "    {",
            "        \"TECHDISER_ID\": \"c1\",",
            "        \"title\": \"column1\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"c2\",",
            "        \"title\": \"column2\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"c3\",",
            "        \"title\": \"column3\"",
            "    }",
            "];",
            "vm.row = [",
            "    {",
            "        \"TECHDISER_ID\": \"r1\",",
            "        \"title\": \"row1\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r2\",",
            "        \"title\": \"row2\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r3\",",
            "        \"title\": \"row3\"",
            "    }",
            "]",
            "vm.matrixProduct = [",
            "    {",
            "        \"TECHDISER_ID\": \"r1c1\",",
            "        \"title\": \"row1column1\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r1c2\",",
            "        \"title\": \"row1column2\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r1c3\",",
            "        \"title\": \"row1column3\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r2c1\",",
            "        \"title\": \"row2column1\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r2c2\",",
            "        \"title\": \"row2column2\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r2c3\",",
            "        \"title\": \"row2column3\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r3c1\",",
            "        \"title\": \"row3column1\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r3c2\",",
            "        \"title\": \"row3column2\"",
            "    },",
            "    {",
            "        \"TECHDISER_ID\": \"r3c3\",",
            "        \"title\": \"row3column3\"",
            "    }",
            "]"
        ],
        "description": "Matrix Controller"
    },
    "Card 2D Data Def": {
        "prefix": "snpt-card2D_data_def",
        "body": [
            "vm.parentArray = [",
            "    {",
            "        \"title\": \"parent1\",",
            "        \"childArray\": [",
            "            {",
            "                \"title\": \"child1\",",
            "            },",
            "            {",
            "                \"title\": \"child2\",",
            "            },",
            "            {",
            "                \"title\": \"child3\",",
            "            },",
            "            {",
            "                \"title\": \"child4\",",
            "            },",
            "            {",
            "                \"title\": \"child5\",",
            "            },",
            "            {",
            "                \"title\": \"child6\",",
            "            },",
            "            {",
            "                \"title\": \"child7\",",
            "            },",
            "            {",
            "                \"title\": \"child8\",",
            "            }",
            "",
            "        ]",
            "    },",
            "    {",
            "        \"title\": \"parent2\",",
            "        \"childArray\": [",
            "            {",
            "                \"title\": \"child1\",",
            "            },",
            "            {",
            "                \"title\": \"child2\",",
            "            },",
            "            {",
            "                \"title\": \"child3\",",
            "            },",
            "            {",
            "                \"title\": \"child4\",",
            "            },",
            "            {",
            "                \"title\": \"child5\",",
            "            },",
            "            {",
            "                \"title\": \"child6\",",
            "            },",
            "",
            "        ]",
            "    },",
            "]"
        ],
        "description": "Card 2D Data Def"
    },
    "Card 1D Data Def": {
        "prefix": "snpt-card1D_data_def",
        "body": [
            "vm.parentObj = {",
            "    \"title\": \"parent1\",",
            "    \"childArray\": [",
            "        {",
            "            \"title\": \"child1\",",
            "        },",
            "        {",
            "            \"title\": \"child2\",",
            "        },",
            "        {",
            "            \"title\": \"child3\",",
            "        },",
            "        {",
            "            \"title\": \"child4\",",
            "        },",
            "        {",
            "            \"title\": \"child5\",",
            "        },",
            "        {",
            "            \"title\": \"child6\",",
            "        },",
            "        {",
            "            \"title\": \"child7\",",
            "        },",
            "        {",
            "            \"title\": \"child8\",",
            "        }",
            "",
            "    ]",
            "}"
        ],
        "description": "Card 1D Data Def"
    },
    "Info Menu Level 3 Data Def": {
        "prefix": "snpt-infoMenuLevel3_data_def",
        "body": [
            "vm.array = [",
            "    {",
            "        \"title\":\"array1\",",
            "        \"secondArray\": [",
            "            {",
            "                \"title\": \"sub array 1\",",
            "                \"thirdArray\": [",
            "                    {",
            "                        \"title\": \"Child Array 1\",",
            "                        ",
            "                    },",
            "                    {",
            "                        \"title\": \"Child Array 2\",",
            "",
            "                    }",
            "                ]",
            "            },",
            "            {",
            "                \"title\": \"sub array 2\",",
            "                \"thirdArray\": [",
            "                    {",
            "                        \"title\": \"Child Array 1\",",
            "",
            "                    }",
            "                ]",
            "            }",
            "        ]",
            "    },",
            "    {",
            "        \"title\": \"array2\",",
            "        \"secondArray\": [",
            "            {",
            "                \"title\": \"sub array 1\",",
            "                \"thirdArray\": [",
            "                    {",
            "                        \"title\": \"Child Array 1\",",
            "",
            "                    }",
            "                ]",
            "            },",
            "            {",
            "                \"title\": \"sub array 2\",",
            "                \"thirdArray\": [",
            "                    {",
            "                        \"title\": \"Child Array 1\",",
            "",
            "                    }",
            "                ]",
            "            }",
            "        ]",
            "    }",
            "]"
        ],
        "description": "Info Menu Level 3 Data Def"
    },
    "Info Menu Level 2 Data Def": {
        "prefix": "snpt-infoMenuLevel2_data_def",
        "body": [
            "vm.array = [",
            "    {",
            "        \"title\": \"array1\",",
            "        \"secondArray\": [",
            "            {",
            "                \"title\": \"sub array 1\",",
            "            },",
            "            {",
            "                \"title\": \"sub array 2\",",
            "            }",
            "        ]",
            "    },",
            "    {",
            "        \"title\": \"array2\",",
            "        \"secondArray\": [",
            "            {",
            "                \"title\": \"sub array 1\",",
            "            },",
            "            {",
            "                \"title\": \"sub array 2\",",
            "            }",
            "        ]",
            "    }",
            "]"
        ],
        "description": "Info Menu Level 2 Data Def"
    },
    "Info Menu Level 1 Data Def": {
        "prefix": "snpt-infoMenuLevel1_data_def",
        "body": [
            "vm.array = [",
            "    {",
            "        \"title\": \"object 1\", ",
            "    },",
            "    {",
            "        \"title\": \"object 2\",",
            "    },",
            "    {",
            "        \"title\": \"object 3\",",
            "    },",
            "    {",
            "        \"title\": \"object 4\",",
            "    }",
            "]"
        ],
        "description": "Info Menu Level 1 Data Def"
    }
}